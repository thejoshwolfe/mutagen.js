child_process = require 'child_process'

!function noop(err)
  return unless err
  console.error err

!function run_child(cmd, args, cb)
  child = child_process.spawn cmd, args

  stderr = []
  stdout = []
  child.stderr.setEncoding('utf8')
  child.stdout.setEncoding('utf8')
  child.stderr.on 'data', !(data) -> stderr.push(data)
  child.stdout.on 'data', !(data) -> stdout.push(data)
  child.on 'close', !(return_code) ->
    if return_code is not 0
      err = new Error("mutagen child process exited with error code")
      err.stdout = stdout.join('')
      err.stderr = stderr.join('')
      return cb(err)
    cb(null, stdout.join(''))


const read_program = """
  import sys, json, mutagen, mutagen.asf
  class CustomEncoder(json.JSONEncoder):
    def default(self, obj):
      mappings = {
        mutagen.asf.ASFUnicodeAttribute: unicode,
        mutagen.asf.ASFBoolAttribute: bool,
        mutagen.asf.ASFDWordAttribute: int,
        mutagen.asf.ASFQWordAttribute: int,
        mutagen.asf.ASFGUIDAttribute: (lambda obj: ""),
        mutagen.asf.ASFByteArrayAttribute: (lambda obj: ""),
      }
      try:
        func = mappings[type(obj)]
      except KeyError:
        return json.JSONEncoder.default(self, obj)
      return func(obj)
  print(json.dumps(dict(mutagen.File(sys.argv[1], easy=True) or {}), cls=CustomEncoder))
"""

export !function read (file, cb=noop)
  run_child 'python', ['-c', read_program, file], (err, stdout) ->
    return cb(err) if err
    cb null, JSON.parse stdout

const edit_program = """
  import sys, mutagen
  f = mutagen.File(sys.argv[1], easy=True)
  for name, value in zip(*[iter(sys.argv[2:])]*2):
    if value != "":
      f[name] = value
    else:
      del f[name]
  f.save()
"""

export !function edit (file, edits, cb=noop)
  args = ['-c', edit_program, file]
  for key, value in edits
    args.push key
    value = "" unless value?
    args.push value
  run_child 'python', args, cb

if require.main is module
  usage = !->
    console.log """
      Usage: read path-to-file
      Usgae: edit path-to-file key=value ...
    """
    process.exit 1
  args = process.argv.slice 2
  command = args.shift!
  file = args.shift!
  usage! unless file
  check_error = !(err) ->
    return unless err
    console.log err
    process.exit 1
  switch command
    case "read"
      read file, !(err, json) ->
        check_error err
        console.log json
    case "edit"
      edits = {}
      for arg of args
        [key, value] = arg.split("=")
        edits[key] = value
      edit file, edits, check_error
    default
      usage!

